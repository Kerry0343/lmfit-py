
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/example_emcee_Model_interface.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_example_emcee_Model_interface.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_example_emcee_Model_interface.py:


Emcee and the Model Interface
=============================

.. GENERATED FROM PYTHON SOURCE LINES 6-13

.. code-block:: default

    import corner
    import matplotlib.pyplot as plt
    import numpy as np

    import lmfit









.. GENERATED FROM PYTHON SOURCE LINES 14-15

Set up a double-exponential function and create a Model:

.. GENERATED FROM PYTHON SOURCE LINES 15-21

.. code-block:: default

    def double_exp(x, a1, t1, a2, t2):
        return a1*np.exp(-x/t1) + a2*np.exp(-(x-0.1) / t2)


    model = lmfit.Model(double_exp)








.. GENERATED FROM PYTHON SOURCE LINES 22-23

Generate some fake data from the model with added noise:

.. GENERATED FROM PYTHON SOURCE LINES 23-28

.. code-block:: default

    truths = (3.0, 2.0, -5.0, 10.0)
    x = np.linspace(1, 10, 250)
    np.random.seed(0)
    y = double_exp(x, *truths)+0.1*np.random.randn(x.size)








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Create model parameters and give them initial values:

.. GENERATED FROM PYTHON SOURCE LINES 30-32

.. code-block:: default

    p = model.make_params(a1=4, t1=3, a2=4, t2=3)








.. GENERATED FROM PYTHON SOURCE LINES 33-34

Fit the model using a traditional minimizer, and show the output:

.. GENERATED FROM PYTHON SOURCE LINES 34-39

.. code-block:: default

    result = model.fit(data=y, params=p, x=x, method='Nelder', nan_policy='omit')

    lmfit.report_fit(result)
    result.plot()




.. image-sg:: /examples/images/sphx_glr_example_emcee_Model_interface_001.png
   :alt: Model(double_exp)
   :srcset: /examples/images/sphx_glr_example_emcee_Model_interface_001.png, /examples/images/sphx_glr_example_emcee_Model_interface_001_3_00x.png 3.00x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[Fit Statistics]]
        # fitting method   = Nelder-Mead
        # function evals   = 609
        # data points      = 250
        # variables        = 4
        chi-square         = 2.33333982
        reduced chi-square = 0.00948512
        Akaike info crit   = -1160.54007
        Bayesian info crit = -1146.45423
        R-squared          = 0.94237407
    [[Variables]]
        a1:  2.98623689 +/- 0.15010519 (5.03%) (init = 4)
        t1:  1.30993186 +/- 0.13449656 (10.27%) (init = 3)
        a2: -4.33525597 +/- 0.11765824 (2.71%) (init = 4)
        t2:  11.8240752 +/- 0.47172610 (3.99%) (init = 3)
    [[Correlations]] (unreported correlations are < 0.100)
        C(a2, t2) = +0.9876
        C(t1, a2) = -0.9278
        C(t1, t2) = -0.8852
        C(a1, t1) = -0.6093
        C(a1, a2) = +0.2973
        C(a1, t2) = +0.2319




.. GENERATED FROM PYTHON SOURCE LINES 40-45

Calculate parameter covariance using ``emcee``:

 - start the walkers out at the best-fit values
 - set ``is_weighted`` to ``False`` to estimate the noise weights
 - set some sensible priors on the uncertainty to keep the MCMC in check

.. GENERATED FROM PYTHON SOURCE LINES 45-51

.. code-block:: default


    emcee_kws = dict(steps=5000, burn=500, thin=20, is_weighted=False,
                     progress=False)
    emcee_params = result.params.copy()
    emcee_params.add('__lnsigma', value=np.log(0.1), min=np.log(0.001), max=np.log(2.0))








.. GENERATED FROM PYTHON SOURCE LINES 52-53

run the MCMC algorithm and show the results:

.. GENERATED FROM PYTHON SOURCE LINES 53-56

.. code-block:: default

    result_emcee = model.fit(data=y, x=x, params=emcee_params, method='emcee',
                             nan_policy='omit', fit_kws=emcee_kws)








.. GENERATED FROM PYTHON SOURCE LINES 57-59

.. code-block:: default

    lmfit.report_fit(result_emcee)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[Fit Statistics]]
        # fitting method   = emcee
        # function evals   = 500000
        # data points      = 250
        # variables        = 5
        chi-square         = 245.221790
        reduced chi-square = 1.00090526
        Akaike info crit   = 5.17553688
        Bayesian info crit = 22.7828415
        R-squared          = -5.05618323
    [[Variables]]
        a1:         2.99546858 +/- 0.14834594 (4.95%) (init = 2.986237)
        t1:         1.32127391 +/- 0.14079400 (10.66%) (init = 1.309932)
        a2:        -4.34376940 +/- 0.12389335 (2.85%) (init = -4.335256)
        t2:         11.7937607 +/- 0.48879633 (4.14%) (init = 11.82408)
        __lnsigma: -2.32712371 +/- 0.04514314 (1.94%) (init = -2.302585)
    [[Correlations]] (unreported correlations are < 0.100)
        C(a2, t2) = +0.9810
        C(t1, a2) = -0.9367
        C(t1, t2) = -0.8949
        C(a1, t1) = -0.5154
        C(a1, a2) = +0.2197
        C(a1, t2) = +0.1868




.. GENERATED FROM PYTHON SOURCE LINES 60-64

.. code-block:: default

    result_emcee.plot_fit()
    plt.plot(x, model.eval(params=result.params, x=x), '--', label='Nelder')
    plt.legend()




.. image-sg:: /examples/images/sphx_glr_example_emcee_Model_interface_002.png
   :alt: Model(double_exp)
   :srcset: /examples/images/sphx_glr_example_emcee_Model_interface_002.png, /examples/images/sphx_glr_example_emcee_Model_interface_002_3_00x.png 3.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 65-66

Check the acceptance fraction to see whether ``emcee`` performed well:

.. GENERATED FROM PYTHON SOURCE LINES 66-70

.. code-block:: default

    plt.plot(result_emcee.acceptance_fraction, 'o')
    plt.xlabel('walker')
    plt.ylabel('acceptance fraction')




.. image-sg:: /examples/images/sphx_glr_example_emcee_Model_interface_003.png
   :alt: example emcee Model interface
   :srcset: /examples/images/sphx_glr_example_emcee_Model_interface_003.png, /examples/images/sphx_glr_example_emcee_Model_interface_003_3_00x.png 3.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 71-72

Try to compute the autocorrelation time:

.. GENERATED FROM PYTHON SOURCE LINES 72-78

.. code-block:: default

    if hasattr(result_emcee, "acor"):
        print("Autocorrelation time for the parameters:")
        print("----------------------------------------")
        for i, p in enumerate(result.params):
            print(f'{p} = {result_emcee.acor[i]:.3f}')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Autocorrelation time for the parameters:
    ----------------------------------------
    a1 = 61.334
    t1 = 85.867
    a2 = 86.046
    t2 = 84.745




.. GENERATED FROM PYTHON SOURCE LINES 79-80

Plot the parameter covariances returned by ``emcee`` using ``corner``:

.. GENERATED FROM PYTHON SOURCE LINES 80-83

.. code-block:: default

    emcee_corner = corner.corner(result_emcee.flatchain, labels=result_emcee.var_names,
                                 truths=list(result_emcee.params.valuesdict().values()))




.. image-sg:: /examples/images/sphx_glr_example_emcee_Model_interface_004.png
   :alt: example emcee Model interface
   :srcset: /examples/images/sphx_glr_example_emcee_Model_interface_004.png, /examples/images/sphx_glr_example_emcee_Model_interface_004_3_00x.png 3.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 84-88

.. code-block:: default

    print("\nmedian of posterior probability distribution")
    print('--------------------------------------------')
    lmfit.report_fit(result_emcee.params)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    median of posterior probability distribution
    --------------------------------------------
    [[Variables]]
        a1:         2.99546858 +/- 0.14834594 (4.95%) (init = 2.986237)
        t1:         1.32127391 +/- 0.14079400 (10.66%) (init = 1.309932)
        a2:        -4.34376940 +/- 0.12389335 (2.85%) (init = -4.335256)
        t2:         11.7937607 +/- 0.48879633 (4.14%) (init = 11.82408)
        __lnsigma: -2.32712371 +/- 0.04514314 (1.94%) (init = -2.302585)
    [[Correlations]] (unreported correlations are < 0.100)
        C(a2, t2) = +0.9810
        C(t1, a2) = -0.9367
        C(t1, t2) = -0.8949
        C(a1, t1) = -0.5154
        C(a1, a2) = +0.2197
        C(a1, t2) = +0.1868




.. GENERATED FROM PYTHON SOURCE LINES 89-90

Find the maximum likelihood solution:

.. GENERATED FROM PYTHON SOURCE LINES 90-101

.. code-block:: default

    highest_prob = np.argmax(result_emcee.lnprob)
    hp_loc = np.unravel_index(highest_prob, result_emcee.lnprob.shape)
    mle_soln = result_emcee.chain[hp_loc]
    print("\nMaximum Likelihood Estimation (MLE):")
    print('----------------------------------')
    for ix, param in enumerate(emcee_params):
        print(f"{param}: {mle_soln[ix]:.3f}")

    quantiles = np.percentile(result_emcee.flatchain['t1'], [2.28, 15.9, 50, 84.2, 97.7])
    print(f"\n\n1 sigma spread = {0.5 * (quantiles[3] - quantiles[1]):.3f}")
    print(f"2 sigma spread = {0.5 * (quantiles[4] - quantiles[0]):.3f}")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Maximum Likelihood Estimation (MLE):
    ----------------------------------
    a1: 2.971
    t1: 1.317
    a2: -4.336
    t2: 11.815
    __lnsigma: -2.336


    1 sigma spread = 0.141
    2 sigma spread = 0.291





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  32.359 seconds)


.. _sphx_glr_download_examples_example_emcee_Model_interface.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_emcee_Model_interface.py <example_emcee_Model_interface.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_emcee_Model_interface.ipynb <example_emcee_Model_interface.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
