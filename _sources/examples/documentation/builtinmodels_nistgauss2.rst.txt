
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/documentation/builtinmodels_nistgauss2.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_documentation_builtinmodels_nistgauss2.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_documentation_builtinmodels_nistgauss2.py:


doc_builtinmodels_nistgauss2.py
===============================

.. GENERATED FROM PYTHON SOURCE LINES 7-50



.. image-sg:: /examples/documentation/images/sphx_glr_builtinmodels_nistgauss2_001.png
   :alt: builtinmodels nistgauss2
   :srcset: /examples/documentation/images/sphx_glr_builtinmodels_nistgauss2_001.png, /examples/documentation/images/sphx_glr_builtinmodels_nistgauss2_001_3_00x.png 3.00x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[Model]]
        ((Model(gaussian, prefix='g1_') + Model(gaussian, prefix='g2_')) + Model(exponential, prefix='exp_'))
    [[Fit Statistics]]
        # fitting method   = leastsq
        # function evals   = 37
        # data points      = 250
        # variables        = 8
        chi-square         = 1247.52821
        reduced chi-square = 5.15507524
        Akaike info crit   = 417.864631
        Bayesian info crit = 446.036318
        R-squared          = 0.99648654
    [[Variables]]
        exp_amplitude:  99.0183265 +/- 0.53748764 (0.54%) (init = 94.53724)
        exp_decay:      90.9508884 +/- 1.10310753 (1.21%) (init = 111.1985)
        g1_amplitude:   4257.77384 +/- 42.3839276 (1.00%) (init = 3189.648)
        g1_center:      107.030957 +/- 0.15006934 (0.14%) (init = 106.5)
        g1_sigma:       16.6725783 +/- 0.16048220 (0.96%) (init = 14.5)
        g1_fwhm:        39.2609209 +/- 0.37790669 (0.96%) == '2.3548200*g1_sigma'
        g1_height:      101.880228 +/- 0.59216965 (0.58%) == '0.3989423*g1_amplitude/max(1e-15, g1_sigma)'
        g2_amplitude:   2493.41698 +/- 36.1699974 (1.45%) (init = 2818.337)
        g2_center:      153.270103 +/- 0.19466966 (0.13%) (init = 150)
        g2_sigma:       13.8069440 +/- 0.18680331 (1.35%) (init = 15)
        g2_fwhm:        32.5128679 +/- 0.43988818 (1.35%) == '2.3548200*g2_sigma'
        g2_height:      72.0455954 +/- 0.61722288 (0.86%) == '0.3989423*g2_amplitude/max(1e-15, g2_sigma)'
    [[Correlations]] (unreported correlations are < 0.500)
        C(g1_amplitude, g1_sigma)   = +0.8243
        C(g2_amplitude, g2_sigma)   = +0.8154
        C(exp_amplitude, exp_decay) = -0.6946
        C(g1_sigma, g2_center)      = +0.6842
        C(g1_center, g2_amplitude)  = -0.6689
        C(g1_center, g2_sigma)      = -0.6521
        C(g1_amplitude, g2_center)  = +0.6477
        C(g1_center, g2_center)     = +0.6205
        C(g1_center, g1_sigma)      = +0.5075
        C(exp_decay, g1_amplitude)  = -0.5074






|

.. code-block:: default

    # <examples/doc_nistgauss2.py>
    import matplotlib.pyplot as plt
    import numpy as np

    from lmfit.models import ExponentialModel, GaussianModel

    dat = np.loadtxt('NIST_Gauss2.dat')
    x = dat[:, 1]
    y = dat[:, 0]

    exp_mod = ExponentialModel(prefix='exp_')
    gauss1 = GaussianModel(prefix='g1_')
    gauss2 = GaussianModel(prefix='g2_')


    def index_of(arrval, value):
        """Return index of array *at or below* value."""
        if value < min(arrval):
            return 0
        return max(np.where(arrval <= value)[0])


    ix1 = index_of(x, 75)
    ix2 = index_of(x, 135)
    ix3 = index_of(x, 175)

    pars1 = exp_mod.guess(y[:ix1], x=x[:ix1])
    pars2 = gauss1.guess(y[ix1:ix2], x=x[ix1:ix2])
    pars3 = gauss2.guess(y[ix2:ix3], x=x[ix2:ix3])

    pars = pars1 + pars2 + pars3
    mod = gauss1 + gauss2 + exp_mod

    out = mod.fit(y, pars, x=x)

    print(out.fit_report(min_correl=0.5))

    plt.plot(x, y)
    plt.plot(x, out.init_fit, '--', label='initial fit')
    plt.plot(x, out.best_fit, '-', label='best fit')
    plt.legend()
    plt.show()
    # <end examples/doc_nistgauss2.py>


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.163 seconds)


.. _sphx_glr_download_examples_documentation_builtinmodels_nistgauss2.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: builtinmodels_nistgauss2.py <builtinmodels_nistgauss2.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: builtinmodels_nistgauss2.ipynb <builtinmodels_nistgauss2.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
