
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/documentation/confidence_advanced.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_documentation_confidence_advanced.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_documentation_confidence_advanced.py:


doc_confidence_advanced.py
==========================

.. GENERATED FROM PYTHON SOURCE LINES 7-74



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/documentation/images/sphx_glr_confidence_advanced_001.png
         :alt: confidence advanced
         :srcset: /examples/documentation/images/sphx_glr_confidence_advanced_001.png, /examples/documentation/images/sphx_glr_confidence_advanced_001_3_00x.png 3.00x
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/documentation/images/sphx_glr_confidence_advanced_002.png
         :alt: confidence advanced
         :srcset: /examples/documentation/images/sphx_glr_confidence_advanced_002.png, /examples/documentation/images/sphx_glr_confidence_advanced_002_3_00x.png 3.00x
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/documentation/images/sphx_glr_confidence_advanced_003.png
         :alt: confidence advanced
         :srcset: /examples/documentation/images/sphx_glr_confidence_advanced_003.png, /examples/documentation/images/sphx_glr_confidence_advanced_003_3_00x.png 3.00x
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[Variables]]
        a1:  2.98622095 +/- 0.14867027 (4.98%) (init = 2.986237)
        a2: -4.33526363 +/- 0.11527574 (2.66%) (init = -4.335256)
        t1:  1.30994276 +/- 0.13121215 (10.02%) (init = 1.309932)
        t2:  11.8240337 +/- 0.46316956 (3.92%) (init = 11.82408)
    [[Correlations]] (unreported correlations are < 0.500)
        C(a2, t2) = +0.9871
        C(a2, t1) = -0.9246
        C(t1, t2) = -0.8805
        C(a1, t1) = -0.5988
           95.45%    68.27%    _BEST_    68.27%    95.45%
     a1:  -0.27285  -0.14165   2.98622  +0.16354  +0.36343
     a2:  -0.30440  -0.13219  -4.33526  +0.10689  +0.19684
     t1:  -0.23392  -0.12494   1.30994  +0.14660  +0.32369
     t2:  -1.01937  -0.48813  11.82403  +0.46045  +0.90439






|

.. code-block:: Python

    # <examples/doc_confidence_advanced.py>
    import matplotlib.pyplot as plt
    import numpy as np

    import lmfit

    x = np.linspace(1, 10, 250)
    np.random.seed(0)
    y = 3.0*np.exp(-x/2) - 5.0*np.exp(-(x-0.1)/10.) + 0.1*np.random.randn(x.size)

    p = lmfit.create_params(a1=4, a2=4, t1=3, t2=3)


    def residual(p):
        return p['a1']*np.exp(-x/p['t1']) + p['a2']*np.exp(-(x-0.1)/p['t2']) - y


    # create Minimizer
    mini = lmfit.Minimizer(residual, p, nan_policy='propagate')

    # first solve with Nelder-Mead algorithm
    out1 = mini.minimize(method='Nelder')

    # then solve with Levenberg-Marquardt using the
    # Nelder-Mead solution as a starting point
    out2 = mini.minimize(method='leastsq', params=out1.params)

    lmfit.report_fit(out2.params, min_correl=0.5)

    ci, trace = lmfit.conf_interval(mini, out2, sigmas=[1, 2], trace=True)
    lmfit.printfuncs.report_ci(ci)

    # plot data and best fit
    plt.figure()
    plt.plot(x, y)
    plt.plot(x, residual(out2.params) + y, '-')
    plt.show()

    # plot confidence intervals (a1 vs t2 and a2 vs t2)
    fig, axes = plt.subplots(1, 2, figsize=(12.8, 4.8))
    cx, cy, grid = lmfit.conf_interval2d(mini, out2, 'a1', 't2', 30, 30)
    ctp = axes[0].contourf(cx, cy, grid, np.linspace(0, 1, 11))
    fig.colorbar(ctp, ax=axes[0])
    axes[0].set_xlabel('a1')
    axes[0].set_ylabel('t2')

    cx, cy, grid = lmfit.conf_interval2d(mini, out2, 'a2', 't2', 30, 30)
    ctp = axes[1].contourf(cx, cy, grid, np.linspace(0, 1, 11))
    fig.colorbar(ctp, ax=axes[1])
    axes[1].set_xlabel('a2')
    axes[1].set_ylabel('t2')
    plt.show()

    # plot dependence between two parameters
    fig, axes = plt.subplots(1, 2, figsize=(12.8, 4.8))
    cx1, cy1, prob = trace['a1']['a1'], trace['a1']['t2'], trace['a1']['prob']
    cx2, cy2, prob2 = trace['t2']['t2'], trace['t2']['a1'], trace['t2']['prob']

    axes[0].scatter(cx1, cy1, c=prob, s=30)
    axes[0].set_xlabel('a1')
    axes[0].set_ylabel('t2')

    axes[1].scatter(cx2, cy2, c=prob2, s=30)
    axes[1].set_xlabel('t2')
    axes[1].set_ylabel('a1')
    plt.show()
    # <end examples/doc_confidence_advanced.py>


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.294 seconds)


.. _sphx_glr_download_examples_documentation_confidence_advanced.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: confidence_advanced.ipynb <confidence_advanced.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: confidence_advanced.py <confidence_advanced.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
